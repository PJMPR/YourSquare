package com.example.yoursquare.dao;

import java.awt.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import com.example.yoursquare.model.Message;

private Connection connection;



	public class MessageRepository {


        private Connection connection;

        private String createTableSql = "CREATE TABLE message("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "fromUser VARCHAR(20),"
                + "toUser VARCHAR(20),"
                + "title VARCHAR(20),"
                + "content VARCHAR(20),"
                + "sendDate DATE,"
                + ")";

        private Statement createTable;

        private String insertSql = "INSERT INTO user(message,fromUser,toUser,title,content,sendDate) VALUES(?,?,?,?,?,?)";
        private String deleteSql = "DELETE FROM user WHERE id = ?";
        private String updateSql = "UPDATE user set message=?, fromUser=?, toUser=?, title=?, content=?, sendDate=? WHERE id=?";
        private String selectByIdSql = "SELECT * FROM user WHERE id=?";
        private String selectAllSql = "SELECT * FROM user";

        private PreparedStatement insert;
        private PreparedStatement delete;
        private PreparedStatement update;
        private PreparedStatement selectById;
        private PreparedStatement selectAll;

        // STATEMENT DONE
        public MessageRepository(Connection connection) {
            this.connection = connection;

            try {
                createTable = connection.createStatement();

                boolean tableExists = false;
                ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
                while (rs.next()) {
                    if (rs.getString("TABLE_NAME").equalsIgnoreCase("person")) {
                        tableExists = true;
                        break;
                    }
                }
                if (!tableExists)
                    createTable.executeUpdate(createTableSql);
                insert = connection.prepareStatement(insertSql);
                delete = connection.prepareStatement(deleteSql);
                update = connection.prepareStatement(updateSql);
                selectById = connection.prepareStatement(selectByIdSql);
                selectAll = connection.prepareStatement(selectAllSql);


            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        // GET DONE
        public Message get(int Id) {


                selectById.setInt(1, Id);
                ResultSet rs = selectById.executeQuery();
                while (rs.next()) {
                    Message result = new Message();
                    result.setId(Id);
                    result.setFromUser(rs.getInt(2));
                    result.setToUser(rs.getInt("3"));
                    result.setTitle(rs.getString("adress"));
                    result.setContent(rs.getString("zipcode"));
                    result.setSendDate(rs.getDate("city"));



                    return result;
                }

            return null;
        }

        // ??????
        public java.awt.List<User> getAll() {
            try {
                java.awt.List<User> result = new ArrayList<User>();
                ResultSet rs = selectAll.executeQuery();
                while (rs.next()) {
                    result.setFromUser(rs.getInt(2));
                    result.setToUser(rs.getInt("3"));
                    result.setTitle(rs.getString("adress"));
                    result.setContent(rs.getString("zipcode"));
                    result.setSendDate(rs.getDate("city"));
                }
                return result;
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return null;
        }

        // DELETE DONE
        public void delete(User p) {
            try {
                delete.setInt(1, p.getId());
                delete.executeUpdate();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        // ADD DONE
        public void add(Message p) {
            try {

                insert.setString(1, p.getName());
                insert.setString(2, p.getSurname());
                insert.setString(1, p.getAdress());
                insert.setString(1, p.getZipcode());
                insert.setString(1, p.getCity());
                insert.setString(1, p.getRegion());
                insert.setString(1, p.getCountry());
                insert.setString(1, p.getPhone());
                insert.setString(1, p.getEmail());
                insert.setString(1, p.getPassword());


                insert.executeUpdate();

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        // UPDATE DONE
        public void update(Message p) {
            try {

                update.setString(1, p.getName());
                update.setString(2, p.getSurname());
                update.setString(3, p.getAdress());
                update.setString(4, p.getZipcode());
                update.setString(5, p.getCity());
                update.setString(6, p.getRegion());
                update.setString(7, p.getCountry());
                update.setString(8, p.getPhone());
                update.setString(9, p.getEmail());
                update.setString(10, p.getPassword());
                update.setInt(11, p.getId());
                update.executeUpdate();

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }











	}